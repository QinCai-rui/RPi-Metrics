name: Publish Python Package to PyPI

on:
  release:
    types: [created]
  workflow_dispatch:
    # Allows manual triggering of the workflow

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      # Required for PyPI trusted publishing
      id-token: write
      contents: read

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools wheel
        
    - name: Create package files
      run: |
        # Create setup.py if it doesn't exist
        cat > setup.py << 'EOF'
        from setuptools import setup, find_packages
        
        setup(
            name="rpi-metrics-server",
            version="__VERSION_PLACEHOLDER__",
            author="qincai",
            author_email="raymont@qincai.xyz",
            description="Monitor and manage Raspberry Pi system metrics via a Flask server",
            long_description=open("README.md").read(),
            long_description_content_type="text/markdown",
            url="https://github.com/QinCai-rui/RPi-Metrics",
            packages=find_packages(),
            classifiers=[
                "Programming Language :: Python :: 3",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: POSIX :: Linux",
                "Topic :: System :: Monitoring",
                "Framework :: Flask",
            ],
            python_requires=">=3.6",
            install_requires=[
                "flask",
                "flask-limiter",
            ],
            include_package_data=True,
            entry_points={
                'console_scripts': [
                    'rpi-metrics-server=rpi_metrics.server.rpi_metrics_server:main',
                ],
            },
        )
        EOF

        # Replace the placeholder with the release tag dynamically
        sed -i "s/__VERSION_PLACEHOLDER__/${{ github.event.release.tag_name }}/" setup.py

        # Create pyproject.toml
        cat > pyproject.toml << 'EOF'
        [build-system]
        requires = ["setuptools>=42", "wheel"]
        build-backend = "setuptools.build_meta"
        EOF
        
        # Create package structure (server only)
        mkdir -p rpi_metrics/server
        
        # Create __init__.py files
        echo "__version__ = '__VERSION_PLACEHOLDER__'" > rpi_metrics/__init__.py
        sed -i "s/__VERSION_PLACEHOLDER__/${{ github.event.release.tag_name }}/" rpi_metrics/__init__.py
        
        # Modify server script to make it importable as a module
        cp Server/rpi_metrics_server.py rpi_metrics/server/
        
        # Modify the server script to handle env.py import more gracefully
        sed -i 's/import env  # env.py file/try:\n    import env  # env.py file\nexcept ImportError:\n    # Create a dummy env module with a default API key\n    import sys\n    import os\n    from types import ModuleType\n    env = ModuleType("env")\n    env.API_KEY = os.environ.get("RPI_METRICS_API_KEY", "change_me_please")\n    sys.modules["env"] = env/' rpi_metrics/server/rpi_metrics_server.py
        
        # Add a main function to the server script
        cat >> rpi_metrics/server/rpi_metrics_server.py << 'EOF'

        def main():
            """Entry point for the console script"""
            try:
                get_commit_info()
            except Exception as e:
                print(f"Warning: Unable to get commit info: {e}")
                # Define global variables that would normally be set by get_commit_info
                global commit_id, commit_time
                commit_id = "N/A"
                commit_time = "N/A"
            
            # Run the Flask app
            app.run(host='0.0.0.0', port=7070)
        
        if __name__ == "__main__":
            main()
        EOF
        
        # Copy server files
        cp -r Server/static rpi_metrics/server/ || echo "No static directory found"
        cp -r Server/templates rpi_metrics/server/ || echo "No templates directory found"
        cp Server/get_commit_info.sh rpi_metrics/server/ || echo "No get_commit_info.sh found"
        cp Server/rpi-metricsd.service rpi_metrics/server/ || echo "No rpi-metricsd.service found"
        
        # Create MANIFEST.in to include non-Python files
        cat > MANIFEST.in << 'EOF'
        recursive-include rpi_metrics/server/static *
        recursive-include rpi_metrics/server/templates *
        include rpi_metrics/server/*.sh
        include rpi_metrics/server/*.service
        include README.md
        include LICENSE
        EOF

        # Create a README specifically for PyPI if needed
        cat > README-PyPI.md << 'EOF'
        # RPi-Metrics Server
        
        A Flask server that allows you to monitor and manage your Raspberry Pi's system metrics such as CPU usage, memory usage, and more.
        
        ## Features
        
        - Monitor CPU usage, temperature, and memory usage
        - Simple RESTful API for retrieving system metrics
        - Flask web server with rate limiting
        - System control via authenticated API endpoints (shutdown, reboot, update)
        
        ## Installation
        
        ```bash
        pip install rpi-metrics-server
        ```
        
        ## Usage
        
        After installation, you can run the server with:
        
        ```bash
        rpi-metrics-server
        ```
        
        Or set the API key via environment variable:
        
        ```bash
        RPI_METRICS_API_KEY="your_secure_api_key" rpi-metrics-server
        ```
        
        For more detailed instructions and client setup, please visit the [GitHub repository](https://github.com/QinCai-rui/RPi-Metrics).
        
        ## License
        
        This project is licensed under the GNU General Public License v3.0 - see the LICENSE file for details.
        EOF

    - name: Build package
      run: python -m build
      
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@release/v1
